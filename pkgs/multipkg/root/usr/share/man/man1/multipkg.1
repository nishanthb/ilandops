.de Sp
.if n .sp
.if t .sp 0.4
..
.TH METAPKG 1
.SH NAME
metapkg \- creates RPM, DEB, packages
.SH SYNOPSIS
.B metapkg
[options] <package directory>

.B metapkg-release
<package directory>

.SH DESCRIPTION

.I Metapkg
is a tool that creates RPM, DEB, packages from its own reasonably
neutral package definition language.  The metapkg-release program will copy
your package to all @METAPKG, build, and release for all platforms.

.SH OPTIONS
.TP
.B \-\-release, \-r 
Release the package to the central repository after building it.  May require
password entry for any ssh, scp, sudo that is required.
.TP
.B \-\-verbose, \-v
Print output of any intermediate steps taken to produce the package.
.TP
.B \-\-list-platforms, \-p
List the set of platforms metapkg believes represent this machine.
.TP
.B \-\-tmpdir, \-t [directory]
Use this directory instead of /tmp/metapkg.$USER to store temporary files.
.TP
.B \-\-capture-permissions, \-c
Capture the current state packagedir/root's ownerships and permissions into
packagedir/permissions.yaml.
.TP
.B \-\-help, \-h
Print help text.

.SH PACKAGE DIRECTORIES
The following is a structure of a package directory for a package
called 'hello':

hello/
.TP
.B index.yaml
Contains configuration information about the package.  See 
.I INDEX.YAML 
below for details.
.TP
.B scripts/build
Used to build a package from source.  This will be run from inside the first
directory found in the source tarball (i.e., metapkg will cd hello-2.1.1/
before running build).  A default script at /usr/share/metapkg/scripts/build
will be used if there is none given.
.TP
.B scripts/{post.sh,postun.sh,pre.sh,preun.sh}
These four scripts will be run post-installation, post-uninstallation,
pre-installation, and pre-uninstallation, respectively. 
.TP
.B scripts/{run,logrun}
If these scripts exist, they will be used as a daemontools run and log/run
script (if a logrun is not provided, a sane default that pipes to multilog
will be used).  If post.sh/postun.sh scripts are not provided, sane defaults
will be used that link the service into /service upon installation.
.TP
.B patches/
Files found in this directory will be applied via patch in alpha-sort order.
Patch will be run from the . directory of the source tarball (i.e., metapkg
will NOT cd hello-2.1.1/ before running patch).
.TP
.B root/
Files found in this directory will be included as-in into your package.
.TP
.B root.tar.gz
Files found under the root/ directory in this tarball will be included as-is
into your package.  Metapkg cannot use both root/ and root.tar.gz in the same
package.
.TP
.B hello-2.1.1.tar.gz
If $NAME-$VERSION.tar.{gz,bz2} exists, it will be unpacked and built using the 
.I build
script.

.SH PLATFORMS

"platform"s are detected by metapkg by a variety of methods and can be
inspected via metapkg -p.  For example, on a debian 3.0 host:

$ metapkg -p

Platforms recognized on this system: linux debian debian-3.0 i386 deb yst

Additional platforms can be specified on a per-host basis by adding new lines
to the file /etc/platforms.  All machines are implicitly members of
the 'default' platform.

Precedence is determined by the order they are reported by metapkg -p; the
last items on the list will have their settings chosen over previous settings.

.SH INDEX.YAML
package/index.yaml should be a properly formatted YAML (see
http://www.yaml.org) file of the form:

platform:
  key: value
  ...
platform2:
  key2: value2
  ...

For numeric values, ensure that your "values" will be interpreted as STRINGS
and not numbers by yaml by enclosing them in single quotes ('2.0' vs. 2.0).

Supported keys:

.TP
.B name
The name of the package.  Takes a string.  Defaults to the name of the
directory.

.TP
.B requires
Other packages that this package requires before it can be installed.  Takes
an array.

.TP
.B summary
A description of your package.  Takes a string.

.TP
.B version
The version of your package.  Takes a string.

.TP
.B dirtransforms
Takes an array of single-key hashes.  Each hash should map a "from" directory
to a "to" directory.  Whenever metapkg encounters a file in "from", it will
install into "to" instead.  This is used most frequently to put redhat's
/etc/rc.d/init.d/* into /etc/init.d on debian.  See an example below in
the 'prepcrawl' index.yaml.

.TP
.B filetransforms
Takes a hash of the form "filename => [ { from => to }, { from2 => to2 } ]".
Inside the file specified by filename, a text replacement will be done
changing all "from" to "to" for each array element in the order specified.
This is mostly used for changing hardcoded strings in files that vary from
platform to platform.  See an example below in the 'metapkg' index.yaml.

.TP
.B cpan-module


.SH EXAMPLES

.TP
.B hello/index.yaml
default:
  name: hello
  summary: "GNU Hello, World!"
  version: '2.1.1'

.TP
.B cpan-expect/index.yaml
default:
  cpan-module: Expect

.TP
.B gemclient/index.yaml
default:
  name: gemclient
  requires:
    - seco-gemstone
    - perl
    - gemclient-run
  summary: Configuration management tool.
  version: '1.3'

.TP
.B prepcrawl/index.yaml
default:
  name: prepcrawl
  requires:
    - manateed
  summary: Prepares things for crawldex functionality.
  version: '1.0.2'

deb:
  dirtransforms:
    - {from : 'etc/rc.d/' , to : 'etc/'

.TP
.B metapkg/index.yaml
default:
  name: metapkg
  requires:
    - ruby
  version: 0.2.0
  summary: A multi-package builder

redhat-7.3:
  dirtransforms:
    - { from : 'usr/lib/ruby/site_ruby' , to : 'usr/local/lib/ruby/site_ruby/'}

redhat-8.0:
  dirtransforms:
    - { from : 'usr/lib/ruby/site_ruby' , to : 'usr/local/lib/ruby/site_ruby/'}

