#+TITLE:     emacs 测试集(self-testing)
#+AUTHOR:    Ting Yu
#+EMAIL:     16667737@qq.com
#+DATE:      2014-10-07 二
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

* emacs 自我测试集(self-testing)
**  如何看当前buffer mode 下所有的key-bind及其描述?
#+BEGIN_QUOTE
   c-h b
#+END_QUOTE

**  C-x/C-c 这两个通用prefix 的common sense.
**  看一个emacs 内置变量的方法

#+BEGIN_QUOTE
(describe-variable VARIABLE &optional BUFFER FRAME)
C-h v
#+END_QUOTE

**  如何更改 emacs 默认用的浏览器？

[[file:/usr/local/share/emacs/24.3/lisp/net/browse-url.el.gz::(function-item%20:tag%20"Chromium"%20:value%20browse-url-chromium)][参考来源]]
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-chromium)
#+END_SRC

**  emacs k 键逃逸
  
#+BEGIN_SRC emacs-lisp
;; M-x eval-expression
(local-set-key "k" 'self-insert-command)
#+END_SRC

#+results:
: self-insert-command

**  emacs 下 ~ 临时文件的高级处理方法.

#+BEGIN_SRC emacs-lisp
; put ~ temporary file to /tmp/<username>/!!!!file
(defvar user-temporary-file-directory
  (concat temporary-file-directory user-login-name "/"))
(make-directory user-temporary-file-directory t)
(setq backup-by-copying t)
(setq backup-directory-alist
      `(("." . ,user-temporary-file-directory)
        (,tramp-file-name-regexp nil)))
(setq auto-save-list-file-prefix

      (concat user-temporary-file-directory ".auto-saves-"))
(setq auto-save-file-name-transforms
      `((".*" ,user-temporary-file-directory t)))
#+END_SRC

**  如何讲下面这个 perl-function 以 yasnippet 的形式替换？

#+BEGIN_SRC emacs-lisp
;;(global-set-key[(meta o)] 'runperl)
(define-skeleton skeleton-perl-function
  "Insert a Perl function" "function name: "
  "# {{{ " str ": TODO" \n
  "sub " str \n
  "{" \n
  \n
  "}" \n
  "# }}}" \n)
#+END_SRC

**  安装 el-get 的方法：
   将下面的code copy 到 *scratch* buffer 然后 C-j 运行, 或者 C-c C-c 下半部分.

#+BEGIN_SRC emacs-lisp
(url-retrieve
 "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
 (lambda (s)
   (let (el-get-master-branch)
     (goto-char (point-max))
     (eval-print-last-sexp))))
#+END_SRC

然后 M-x el-get-install  选择相应的包名.

