* qemu 虚拟机 (opensource processor emulator)
  :PROPERTIES:
  :ID:       c76c2a36-a3c7-4e73-aac0-ec6c1ff569b7
  :END:

** General Examples

*** 初始化安装一个centos：

#+BEGIN_SRC sh :dir /sudo::
sudo qemu-system-x86_64 -boot d \
	-cdrom /home/yuting/i/iso/CentOS-6.5-x86_64-minimal.iso \
	-hda /home/yuting/d/disk/tq9001.disk.img  \
	-net nic -net tap,ifname=tap0,script=no  -m 512 -curses
#+END_SRC


*** 创建一个qcow 格式的文件系统img.

#+BEGIN_EXAMPLE
   qemu-img create -f qcow disk.img 2048M
#+END_EXAMPLE

*** 启动 tq9001


qemu-system-x86_64

   qemu-system-x86_64 -boot n  -hda inst/storage_file/disk.img     -net nic -net tap,ifname=tap1,script=no 
   qemu-system-x86_64 -kernel ... -initrd ...  -append 'rdbreak=cmdline,key=value'


** qemu 通过网桥的方式配置网络.

#qemu bridge mode ? 可以让两个guest mode linux互ping成功, 也可已让 guest os 与 host os 通信.
# 主要原理: 宿主机上 需要建立一个 tap 设备(2层设备) 然后建立 br0 网桥，将 tap0 eth0 tapn 等
# 网络设备封装到 br0 中， 注意. 要关闭 br0 上的stp.
/sbin/ifconfig eth0 down
/sbin/ifconfig eth0 0.0.0.0 promisc up
openvpn --mktun --dev tap0
ifconfig tap0 0.0.0.0 up
openvpn --mktun --dev tap1
ifconfig tap1 0.0.0.0 up
brctl addbr br0
brctl addif br0 eth0
brctl addif br0 tap0
brctl addif br0 tap1
brctl stp br0 off    # 不知到 stp 是干啥的，但是需要关闭？
.其次，我们不需要STP(生成树协议)等。因为我们只有一个路由器，是绝对不可能形成一个环的。我们可以关闭这个功能。（这样也可以减少网络环境的数据包污染）：
root@bridge:~> brctl stp br0 off
ifconfig br0 10.10.10.2 netmask 255.255.255.0

guest 1:
qemu -m 512 -hda linux-0.2.img -net nic -net tap,ifname=tap0,script=no
guest 2:
qemu -m 512 -hda linux-0.2.img -net nic,macaddr=00:01:02:03:04:05 -net tap,ifname=tap1,script=no


** qemu run w/ private virual bridge

Use case:

You want to set up a private network between 2 or more virtual machines. This network won't be 
seen from the other virtual machines nor from the real network.

Prerequisites:

You need kvm up and running
If you don't want to run as root, the user you want to use needs to have rw access to /dev/kvm
You need the following commands installed on your system, and if you don't want to run as root,
the user you want to use needs to be able to sudo the following command:
/sbin/ip
/usr/sbin/brctl
/usr/sbin/tunctl

- qemu 第一次启动的时候 device up, 之后device down再无法up .  
  sudo 导致虚拟机停机的时候调用了 qemu-ifdown 脚本down 然后启动的时候 script=no 没有任何初始化的脚本的动作.
解决思路.
    * 将 tap0 建立在某个普通用户下。sudo tunctl -u `whoami` -t tap0 也就是受到下面 qemu-ifcfg 脚本的启发.

Solution:

You need to create a bridge, e-g:
sudo /usr/sbin/brctl addbr br0
You need a qemu-ifup script containing the following:
#!/bin/sh
set -x

switch=br0

if [ -n "$1" ];then
        /usr/bin/sudo /usr/sbin/tunctl -u `whoami` -t $1
        /usr/bin/sudo /sbin/ip link set $1 up
        sleep 0.5s
        /usr/bin/sudo /usr/sbin/brctl addif $switch $1
        exit 0
else
        echo "Error: no interface specified"
        exit 1
fi


** Generate a MAC address, either manually or using:

#!/bin/bash
# 随机生成 mac 地址 ,generate a random mac address for the qemu nic
printf 'DE:AD:BE:EF:%02X:%02X\n' $((RANDOM%256)) $((RANDOM%256))
Run each guest with the following, replacing $macaddress with the value from the previous step
qemu-system-x86_64 -hda /path/to/hda.img -device e1000,netdev=net0,mac=$macaddress -netdev tap,id=net0
Notes:

If you don't want to run as root, the qemu-ifup must be executable by the user you want to use
You can either create a system-wide qemu-ifup in /etc/qemu-ifup or use another one. In the latter case, run
qemu-system-x86_64 -hda /path/to/hda.img -device e1000,netdev=net0,mac=$macaddress -netdev tap,id=net0,script=/path/to/qemu-ifup
Each guest on the private virtual network must have a different MAC address


# lfslivecd 的启动命令，注意需要  sudo 才能访问到 tap0.
sudo qemu-system-x86_64 -cdrom ./lfslivecd-x86_64-6.3-r2145.iso  -net nic -net tap,ifname=tap0,script=no
